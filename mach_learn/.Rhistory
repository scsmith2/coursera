setwd("C:/users/scott_admin/documents/git_repo/coursera/mach_learn")
td <- read.csv("pml-training.csv",as.is=TRUE)
td <- td[,colSums(!is.na(td))>(.9*l)]
names(testing)[names(testing)=="kurtosis_picth_belt"]<-"kurtosis_pitch_belt"
library(caret); library(ggplot2)
training <- read.csv("pml-training.csv",as.is=TRUE)
testing <- read.csv("pml-testing.csv",as.is=TRUE)
#Clean up data
names(training)[names(training)=="kurtosis_picth_belt"]<-"kurtosis_pitch_belt"
names(testing)[names(testing)=="kurtosis_picth_belt"]<-"kurtosis_pitch_belt"
#Remove columns that are >10% NA
#training <- training[,colSums(!is.na(training))>(.9*l)]
#Remove columns that are not features
#drops <- c("X",
#           "user_name",
#           "raw_timestamp_part_1",
#           "raw_timestamp_part_2",
#           "cvtd_timestamp",
#           "new_window",
#           "num_window")
#trn <- training[,!(names(training) %in% drops)]
#tst <- testing[,!(names(testing) %in% drops)]
trn <- data.frame(training$classe,
training$pitch_belt,
training$yaw_belt,
training$total_accel_belt,
training$total_accel_arm,
training$total_accel_dumbbell,
training$roll_forearm,
training$yaw_forearm)
tst <- data.frame(#testing$classe,
testing$pitch_belt,
testing$yaw_belt,
testing$total_accel_belt,
testing$total_accel_arm,
testing$total_accel_dumbbell,
testing$roll_forearm,
testing$yaw_forearm)
trn <- data.frame(classe<-training$classe,
training$pitch_belt,
training$yaw_belt,
training$total_accel_belt,
training$total_accel_arm,
training$total_accel_dumbbell,
training$roll_forearm,
training$yaw_forearm)
trn <- data.frame(training$classe,
training$pitch_belt,
training$yaw_belt,
training$total_accel_belt,
training$total_accel_arm,
training$total_accel_dumbbell,
training$roll_forearm,
training$yaw_forearm)
colnames(trn<-c("classe","pitch_belt","yaw_belt","total_accel_belt",
"total_accel_arm","total_accel_dumbbell","roll_forearm","yaw_forearm"))
tst <- data.frame(#testing$classe,
testing$pitch_belt,
testing$yaw_belt,
testing$total_accel_belt,
testing$total_accel_arm,
testing$total_accel_dumbbell,
testing$roll_forearm,
testing$yaw_forearm)
colnames(trn<-c("pitch_belt","yaw_belt","total_accel_belt",
"total_accel_arm","total_accel_dumbbell","roll_forearm","yaw_forearm"))
class(training)
trn <- data.frame(training[1]$classe,
training$pitch_belt,
training$yaw_belt,
training$total_accel_belt,
training$total_accel_arm,
training$total_accel_dumbbell,
training$roll_forearm,
training$yaw_forearm)
colnames(trn<-c("classe","pitch_belt","yaw_belt","total_accel_belt",
"total_accel_arm","total_accel_dumbbell","roll_forearm","yaw_forearm"))
trn <- data.frame(training$classe,
training$pitch_belt,
training$yaw_belt,
training$total_accel_belt,
training$total_accel_arm,
training$total_accel_dumbbell,
training$roll_forearm,
training$yaw_forearm)
colnames(trn)<-c("classe","pitch_belt","yaw_belt","total_accel_belt",
"total_accel_arm","total_accel_dumbbell","roll_forearm","yaw_forearm")
tst <- data.frame(#testing$classe,
testing$pitch_belt,
testing$yaw_belt,
testing$total_accel_belt,
testing$total_accel_arm,
testing$total_accel_dumbbell,
testing$roll_forearm,
testing$yaw_forearm)
colnames(tst)<-c("pitch_belt","yaw_belt","total_accel_belt",
"total_accel_arm","total_accel_dumbbell","roll_forearm","yaw_forearm")
gbmCtrl <- trainControl(method = "cv",
number = 10,
classProbs = TRUE)
gbmCtrl <- trainControl(method = "cv",
number = 10,
classProbs = TRUE)
set.seed(137)
gbmFit <- train(classe ~ .,
data = trn,
method = "gbm",
trControl = gbmCtrl,
metric = "ROC")
gbmTrnClasses <- predict(gbmFit,newdata=trn)
gbmTrnProbs <- predict(gbmFit,newdata=trn,type="prob")
confusionMatrix(gbmTrnClasses,trn$classe)
ggplot(gbmFit)
install.packages("labeling")
ggplot(gbmFit)
gbmTstClasses <- predict(gbmFit,newdata=tst)
gbmTrnProbs <- predict(gbmFit,newdata=tst)
gbmTstClasses
ggplot(gbmTrnProbs)
plot(gbmTrnProbs)
class(gbmTrnProbs)
gbmTrnProbs
gbmTstProbs
gbmTrnClasses <- predict(gbmFit,newdata=trn)
gbmTrnProbs <- predict(gbmFit,newdata=trn,type="prob")
confusionMatrix(gbmTrnClasses,trn$classe)
gbmTstClasses <- predict(gbmFit,newdata=tst)
gbmTsnProbs <- predict(gbmFit,newdata=tst)
ggplot(gbmTrnProbs)
gbmTstProbs <- predict(gbmFit,newdata=tst)
print(gbmTstProbs)
gbmTstProbs <- predict(gbmFit,newdata=tst,type="prob")
ggplot(gbmTstProbs)
plot(gbmTstProbs)
summary(gbmTstProbs)
gbmTstProbs
confusionMatrix(gbmTrnClasses,trn$classe)
print(gbmTstClasses)
print(gbmTstProbs)
