print("This is Scott Smith")
install.packages("htmltools")
install.packages("caTools")
install.packages("rmarkdown")
clear
home
library(caret)
library(mlbench)
data(Sonar)
set.seed(107)
inTrain <- createDataPartition(y = Sonar$Class,
## the outcome data are needed
p = .75,
## the percentage of data
## in the training set
list = FALSE)
## the results format
## output for inTrain is set of integers for rows
## of sonar that belong in the training set
training <- Sonar[inTrain,]
testing <- Sonar[-inTrain,]
ctrl <- trainControl(method = "repeatedcv",
repeats = 3,
classProbs = TRUE,
summaryFunction = twoClassSummary)
plsFit <- train(Class ~ .,
data = training,
method = "pls",
tuneLength = 15,
trControl = ctrl,
metric = "ROC",
preProc = c("center", "scale"))
# Generate a set of
plsClasses <- predict(plsFit, newdata = testing)
plsProbs <- predict(plsFit, newdata = testing, type = "prob")
confusionMatrix(data = plsClasses, testing$Class)
rdaGrid = data.frame(gamma = (0:4)/4, lambda = 3/4)
set.seed(123)
rdaFit <- train(Class ~ .,
data = training,
method = "rda",
tuneGrid = rdaGrid,
trControl = ctrl,
metric = "ROC")
rdaFit
rdaClasses <- predict(rdaFit, newdata = testing)
confusionMatrix(rdaClasses, testing$Class)
# Compare resampling results
resamps <- resamples(list(pls = plsFit, rda = rdaFit))
summary(resamps)
densityplot(~testing, plsClasses)
plot.train
plot(rdaClasses)
plot.train(rdaClasses)
?plot.train
plot.train(plsFit)
library(pROC)
library(pROC)
plsROC <- roc(plsClasses, plsProbs[,"PS"],
levels = 2)
plsROC <- roc(plsClasses, plsProbs[,2],
levels = 2)
plsROC <- roc(testing, Class,
positive=levels(Class)[1])
plsROC <- roc(testing, plsClasses,
positive=levels(plsClasses)[1])
plsROC <- roc(testing$Class, plsClasses,
positive=levels(plsClasses)[1])
library(caret); library(ggplot2)
# Download test & training csv's
#download.file("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv","pml-training.csv")
#download.file("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv","pml-testing.csv")
#Load test data into 'testdata'
td <- read.csv("pml-training.csv",as.is=TRUE)
#Clean up data
names(td)[names(td)=="kurtosis_picth_belt"]<-"kurtosis_pitch_belt"
#Remove columns that are >10% NA
l <- length(td$classe)
td <- td[,colSums(!is.na(td))>(.9*l)]
#Remove columns that are not features
drops <- c("X",
"user_name",
"raw_timestamp_part_1",
"raw_timestamp_part_2",
"cvtd_timestamp",
"new_window",
"num_window")
td <- td[,!(names(td) %in% drops)]
#Convert character features to numeric
#w <- which(sapply(td,class) == 'character')
#td[w] <- lapply(td[w], function(x) as.numeric(x))
#Transform NAs in converted columns to 0
#td[is.na(td)] <- 0
ctrl <- trainControl(method = "repeatedcv",
repeats = 3,
classProbs = TRUE)
adaFit <- train(classe ~ .,
data = td,
method = "ada",
trControl = ctrl,
metric = "ROC")
td <- read.csv("pml-training.csv",as.is=TRUE)
setwd("~/coursera/mach_learn")
library(caret); library(ggplot2)
# Download test & training csv's
#download.file("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv","pml-training.csv")
#download.file("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv","pml-testing.csv")
#Load test data into 'testdata'
td <- read.csv("pml-training.csv",as.is=TRUE)
#Clean up data
names(td)[names(td)=="kurtosis_picth_belt"]<-"kurtosis_pitch_belt"
#Remove columns that are >10% NA
l <- length(td$classe)
td <- td[,colSums(!is.na(td))>(.9*l)]
#Remove columns that are not features
drops <- c("X",
"user_name",
"raw_timestamp_part_1",
"raw_timestamp_part_2",
"cvtd_timestamp",
"new_window",
"num_window")
td <- td[,!(names(td) %in% drops)]
#Convert character features to numeric
#w <- which(sapply(td,class) == 'character')
#td[w] <- lapply(td[w], function(x) as.numeric(x))
#Transform NAs in converted columns to 0
#td[is.na(td)] <- 0
ctrl <- trainControl(method = "repeatedcv",
repeats = 3,
classProbs = TRUE)
adaFit <- train(classe ~ .,
data = td,
method = "ada",
trControl = ctrl,
metric = "ROC")
install.packages("ada")
adaFit <- train(classe ~ .,
data = td,
method = "ada",
trControl = ctrl,
metric = "ROC")
