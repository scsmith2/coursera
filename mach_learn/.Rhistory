library(AppliedPredictiveModeling); data(concrete)
set.seed(3523)
inTrain = createDataPartition(concrete$CompressiveStrength,
p = 3/4)[[1]]
training = concrete[inTrain,]
testing = concrete[-inTrain,]
library(AppliedPredictiveModeling); library(caret)
data(concrete)
set.seed(3523)
inTrain = createDataPartition(concrete$CompressiveStrength,
p = 3/4)[[1]]
training = concrete[inTrain,]
testing = concrete[-inTrain,]
set.seed(233)
lassoFit <- train(CompressiveStrength ~ .,
method = "lasso",
data = training)
summary(lassoFit)
lassoFit
lassoFit$finalModel
?plot.enet
plot.enet(lassoFit)
plot.enet(lassoFit$finalModel)
?plot.enet
plot.enet(lassoFit$finalModel,use.color=TRUE)
lassoFit$modelType
lassoFit$results
plot.enet(lassoFit$finalModel,xvar="penalty",use.color=TRUE)
setwd("C:/users/scott_admin/documents/git_repo/coursera/mach_learn")
?download
?downloadfile
?download.file
library(lubridate)  # For year() function below
url <- "https://d396qusza40orc.cloudfront.net/predmachlearn/gaData.csv"
download.file(url,"gaData.csv")
dat = read.csv(gaData.csv")
training = dat[year(dat$date) < 2012,]
testing = dat[(year(dat$date)) > 2011,]
tstrain = ts(training$visitsTumblr)
)
)
)
]
]
)
;alskdjf
__))
}}}}
P}
;alskdfj
break
tstrain = ts(training$visitsTumblr)
library(lubridate)  # For year() function below
url <- "https://d396qusza40orc.cloudfront.net/predmachlearn/gaData.csv"
download.file(url,"gaData.csv")
dat = read.csv(gaData.csv")
"
download.file(url,"gaData.csv")
dat = read.csv("gaData.csv")
training = dat[year(dat$date) < 2012,]
testing = dat[(year(dat$date)) > 2011,]
tstrain = ts(training$visitsTumblr)
library(lubridate)  # For year() function below
install.packages("lubridate")
library(lubridate)  # For year() function below
url <- "https://d396qusza40orc.cloudfront.net/predmachlearn/gaData.csv"
download.file(url,"gaData.csv")
dat = read.csv("gaData.csv")
training = dat[year(dat$date) < 2012,]
testing = dat[(year(dat$date)) > 2011,]
tstrain = ts(training$visitsTumblr)
library(Forecast)
library(forecast)
?bats
fit <- bats(training)
fit <- bats(tstrain)
fit
plot(decompose(fit))
plot(fit)
h <- dim(testing)[1]
# forecast the model for remaining time points
fcast <- forecast(fit, level = 95, h = h)
# get the accuracy
accuracy(fcast, testing$visitsTumblr)
# check what percentage of times that the actual number of visitors was within
# 95% confidence interval
result <- c()
l <- length(fcast$lower)
for (i in 1:l){
x <- testing$visitsTumblr[i]
a <- fcast$lower[i] < x & x < fcast$upper[i]
result <- c(result, a)
}
sum(result)/l * 100
set.seed(3523)
library(AppliedPredictiveModeling); library(e1071)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
set.seed(325)
?svm
set.seed(3523)
library(AppliedPredictiveModeling); library(e1071)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
set.seed(325)
library(AppliedPredictiveModeling); library(e1071); library(caret)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
set.seed(325)
svmFit <- train(CompressiveStrength ~ .,
method = "svm",
data = training)
?svm
svmFit <- svm(CompressiveStrength ~ .,
method = "svm",
data = training)
svmPred <- predict(svmFit,testing$CompressiveStrength)
svmPred <- predict(svmFit,testing)
svmRMSE <- sqrt(sum((svmPred-testing$CompressiveStrength)^2))
set.seed(3523)
library(AppliedPredictiveModeling); library(e1071)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
set.seed(325)
svmFit <- svm(CompressiveStrength ~ ., data = training)
svmPred <- predict(svmFit,testing)
svmRMSE <- sqrt(sum((svmPred-testing$CompressiveStrength)^2))
svmRMSE <- sqrt(sum((svmPred-testing$CompressiveStrength)^2)/length(svmPred)
svmRMSE <- sqrt(sum((svmPred-testing$CompressiveStrength)^2)/length(svmPred))
svmRMSE <- sqrt(sum((svmPred-testing$CompressiveStrength)^2)/length(svmPred))
?featurePlot
training$CompressiveStrength(10:15)
training$CompressiveStrength[10:15]
